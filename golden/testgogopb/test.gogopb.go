// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: golden/test.proto

package testgogopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestEnum int32

const (
	TestEnum_ZERO TestEnum = 0
	TestEnum_ONE  TestEnum = 1
)

var TestEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
}
var TestEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
}

func (x TestEnum) String() string {
	return proto.EnumName(TestEnum_name, int32(x))
}
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_0639bdf0d6957922, []int{0}
}

type TestMessage struct {
	Bool                 bool           `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Int32                int32          `protobuf:"varint,2,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64                int64          `protobuf:"varint,3,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32               uint32         `protobuf:"varint,4,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64               uint64         `protobuf:"varint,5,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Sint32               int32          `protobuf:"zigzag32,6,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sint64               int64          `protobuf:"zigzag64,7,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Fixed32              uint32         `protobuf:"fixed32,8,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64              uint64         `protobuf:"fixed64,9,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Sfixed32             int32          `protobuf:"fixed32,10,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Sfixed64             int64          `protobuf:"fixed64,11,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Double               float64        `protobuf:"fixed64,12,opt,name=double,proto3" json:"double,omitempty"`
	Float                float32        `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	String_              string         `protobuf:"bytes,14,opt,name=string,proto3" json:"string,omitempty"`
	ByteArray            []byte         `protobuf:"bytes,15,opt,name=byte_array,json=byteArray,proto3" json:"byte_array,omitempty"`
	Enum                 TestEnum       `protobuf:"varint,16,opt,name=enum,proto3,enum=testzeropb.TestEnum" json:"enum,omitempty"`
	Message              *TestMessage   `protobuf:"bytes,17,opt,name=message,proto3" json:"message,omitempty"`
	Bools                []bool         `protobuf:"varint,18,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	Int32S               []int32        `protobuf:"varint,19,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	Int64S               []int64        `protobuf:"varint,20,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	Uint32S              []uint32       `protobuf:"varint,21,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	Uint64S              []uint64       `protobuf:"varint,22,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	Sint32S              []int32        `protobuf:"zigzag32,23,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	Sint64S              []int64        `protobuf:"zigzag64,24,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	Fixed32S             []uint32       `protobuf:"fixed32,25,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	Fixed64S             []uint64       `protobuf:"fixed64,26,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	Sfixed32S            []int32        `protobuf:"fixed32,27,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	Sfixed64S            []int64        `protobuf:"fixed64,28,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	Doubles              []float64      `protobuf:"fixed64,29,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	Floats               []float32      `protobuf:"fixed32,30,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	Strings              []string       `protobuf:"bytes,31,rep,name=strings,proto3" json:"strings,omitempty"`
	ByteArrays           [][]byte       `protobuf:"bytes,32,rep,name=byte_arrays,json=byteArrays,proto3" json:"byte_arrays,omitempty"`
	Enums                []TestEnum     `protobuf:"varint,33,rep,packed,name=enums,proto3,enum=testzeropb.TestEnum" json:"enums,omitempty"`
	Messages             []*TestMessage `protobuf:"bytes,34,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}
func (*TestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_0639bdf0d6957922, []int{0}
}
func (m *TestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMessage.Merge(dst, src)
}
func (m *TestMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TestMessage)(nil), "testzeropb.TestMessage")
	proto.RegisterEnum("testzeropb.TestEnum", TestEnum_name, TestEnum_value)
}
func (m *TestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bool {
		dAtA[i] = 0x8
		i++
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Int32 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Int32))
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Int64))
	}
	if m.Uint32 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Uint32))
	}
	if m.Uint64 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Uint64))
	}
	if m.Sint32 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTest(dAtA, i, uint64((uint32(m.Sint32)<<1)^uint32((m.Sint32>>31))))
	}
	if m.Sint64 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTest(dAtA, i, uint64((uint64(m.Sint64)<<1)^uint64((m.Sint64>>63))))
	}
	if m.Fixed32 != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Fixed32))
		i += 4
	}
	if m.Fixed64 != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Fixed64))
		i += 8
	}
	if m.Sfixed32 != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sfixed32))
		i += 4
	}
	if m.Sfixed64 != 0 {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sfixed64))
		i += 8
	}
	if m.Double != 0 {
		dAtA[i] = 0x61
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Double))))
		i += 8
	}
	if m.Float != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float))))
		i += 4
	}
	if len(m.String_) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.String_)))
		i += copy(dAtA[i:], m.String_)
	}
	if len(m.ByteArray) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.ByteArray)))
		i += copy(dAtA[i:], m.ByteArray)
	}
	if m.Enum != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Enum))
	}
	if m.Message != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Bools) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Bools)))
		for _, b := range m.Bools {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Int32S) > 0 {
		dAtA3 := make([]byte, len(m.Int32S)*10)
		var j2 int
		for _, num1 := range m.Int32S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.Int64S) > 0 {
		dAtA5 := make([]byte, len(m.Int64S)*10)
		var j4 int
		for _, num1 := range m.Int64S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.Uint32S) > 0 {
		dAtA7 := make([]byte, len(m.Uint32S)*10)
		var j6 int
		for _, num := range m.Uint32S {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.Uint64S) > 0 {
		dAtA9 := make([]byte, len(m.Uint64S)*10)
		var j8 int
		for _, num := range m.Uint64S {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if len(m.Sint32S) > 0 {
		dAtA10 := make([]byte, len(m.Sint32S)*5)
		var j11 int
		for _, num := range m.Sint32S {
			x12 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x12 >= 1<<7 {
				dAtA10[j11] = uint8(uint64(x12)&0x7f | 0x80)
				j11++
				x12 >>= 7
			}
			dAtA10[j11] = uint8(x12)
			j11++
		}
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA10[:j11])
	}
	if len(m.Sint64S) > 0 {
		var j13 int
		dAtA15 := make([]byte, len(m.Sint64S)*10)
		for _, num := range m.Sint64S {
			x14 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x14 >= 1<<7 {
				dAtA15[j13] = uint8(uint64(x14)&0x7f | 0x80)
				j13++
				x14 >>= 7
			}
			dAtA15[j13] = uint8(x14)
			j13++
		}
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA15[:j13])
	}
	if len(m.Fixed32S) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Fixed32S)*4))
		for _, num := range m.Fixed32S {
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	if len(m.Fixed64S) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Fixed64S)*8))
		for _, num := range m.Fixed64S {
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	if len(m.Sfixed32S) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Sfixed32S)*4))
		for _, num := range m.Sfixed32S {
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	if len(m.Sfixed64S) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Sfixed64S)*8))
		for _, num := range m.Sfixed64S {
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	if len(m.Doubles) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Doubles)*8))
		for _, num := range m.Doubles {
			f16 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f16))
			i += 8
		}
	}
	if len(m.Floats) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Floats)*4))
		for _, num := range m.Floats {
			f17 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f17))
			i += 4
		}
	}
	if len(m.Strings) > 0 {
		for _, s := range m.Strings {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ByteArrays) > 0 {
		for _, b := range m.ByteArrays {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTest(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Enums) > 0 {
		dAtA19 := make([]byte, len(m.Enums)*10)
		var j18 int
		for _, num := range m.Enums {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTest(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintTest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bool {
		n += 2
	}
	if m.Int32 != 0 {
		n += 1 + sovTest(uint64(m.Int32))
	}
	if m.Int64 != 0 {
		n += 1 + sovTest(uint64(m.Int64))
	}
	if m.Uint32 != 0 {
		n += 1 + sovTest(uint64(m.Uint32))
	}
	if m.Uint64 != 0 {
		n += 1 + sovTest(uint64(m.Uint64))
	}
	if m.Sint32 != 0 {
		n += 1 + sozTest(uint64(m.Sint32))
	}
	if m.Sint64 != 0 {
		n += 1 + sozTest(uint64(m.Sint64))
	}
	if m.Fixed32 != 0 {
		n += 5
	}
	if m.Fixed64 != 0 {
		n += 9
	}
	if m.Sfixed32 != 0 {
		n += 5
	}
	if m.Sfixed64 != 0 {
		n += 9
	}
	if m.Double != 0 {
		n += 9
	}
	if m.Float != 0 {
		n += 5
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.ByteArray)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Enum != 0 {
		n += 2 + sovTest(uint64(m.Enum))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if len(m.Bools) > 0 {
		n += 2 + sovTest(uint64(len(m.Bools))) + len(m.Bools)*1
	}
	if len(m.Int32S) > 0 {
		l = 0
		for _, e := range m.Int32S {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Int64S) > 0 {
		l = 0
		for _, e := range m.Int64S {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Uint32S) > 0 {
		l = 0
		for _, e := range m.Uint32S {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Uint64S) > 0 {
		l = 0
		for _, e := range m.Uint64S {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Sint32S) > 0 {
		l = 0
		for _, e := range m.Sint32S {
			l += sozTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Sint64S) > 0 {
		l = 0
		for _, e := range m.Sint64S {
			l += sozTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Fixed32S) > 0 {
		n += 2 + sovTest(uint64(len(m.Fixed32S)*4)) + len(m.Fixed32S)*4
	}
	if len(m.Fixed64S) > 0 {
		n += 2 + sovTest(uint64(len(m.Fixed64S)*8)) + len(m.Fixed64S)*8
	}
	if len(m.Sfixed32S) > 0 {
		n += 2 + sovTest(uint64(len(m.Sfixed32S)*4)) + len(m.Sfixed32S)*4
	}
	if len(m.Sfixed64S) > 0 {
		n += 2 + sovTest(uint64(len(m.Sfixed64S)*8)) + len(m.Sfixed64S)*8
	}
	if len(m.Doubles) > 0 {
		n += 2 + sovTest(uint64(len(m.Doubles)*8)) + len(m.Doubles)*8
	}
	if len(m.Floats) > 0 {
		n += 2 + sovTest(uint64(len(m.Floats)*4)) + len(m.Floats)*4
	}
	if len(m.Strings) > 0 {
		for _, s := range m.Strings {
			l = len(s)
			n += 2 + l + sovTest(uint64(l))
		}
	}
	if len(m.ByteArrays) > 0 {
		for _, b := range m.ByteArrays {
			l = len(b)
			n += 2 + l + sovTest(uint64(l))
		}
	}
	if len(m.Enums) > 0 {
		l = 0
		for _, e := range m.Enums {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 2 + l + sovTest(uint64(l))
		}
	}
	return n
}

func sovTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32 = v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Sint64 = int64(v)
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			m.Fixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64", wireType)
			}
			m.Fixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32", wireType)
			}
			m.Sfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed32 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64", wireType)
			}
			m.Sfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Double = float64(math.Float64frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float = float32(math.Float32frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteArray", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteArray = append(m.ByteArray[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteArray == nil {
				m.ByteArray = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			m.Enum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enum |= (TestEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &TestMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bools = append(m.Bools, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Bools) == 0 {
					m.Bools = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bools = append(m.Bools, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bools", wireType)
			}
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int32S = append(m.Int32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Int32S) == 0 {
					m.Int32S = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int32S = append(m.Int32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32S", wireType)
			}
		case 20:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64S = append(m.Int64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Int64S) == 0 {
					m.Int64S = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int64S = append(m.Int64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64S", wireType)
			}
		case 21:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint32S = append(m.Uint32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uint32S) == 0 {
					m.Uint32S = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uint32S = append(m.Uint32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32S", wireType)
			}
		case 22:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uint64S = append(m.Uint64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uint64S) == 0 {
					m.Uint64S = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uint64S = append(m.Uint64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64S", wireType)
			}
		case 23:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Sint32S = append(m.Sint32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sint32S) == 0 {
					m.Sint32S = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Sint32S = append(m.Sint32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32S", wireType)
			}
		case 24:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Sint64S = append(m.Sint64S, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sint64S) == 0 {
					m.Sint64S = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Sint64S = append(m.Sint64S, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64S", wireType)
			}
		case 25:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.Fixed32S = append(m.Fixed32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Fixed32S) == 0 {
					m.Fixed32S = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.Fixed32S = append(m.Fixed32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32S", wireType)
			}
		case 26:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.Fixed64S = append(m.Fixed64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Fixed64S) == 0 {
					m.Fixed64S = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.Fixed64S = append(m.Fixed64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64S", wireType)
			}
		case 27:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.Sfixed32S = append(m.Sfixed32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Sfixed32S) == 0 {
					m.Sfixed32S = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.Sfixed32S = append(m.Sfixed32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32S", wireType)
			}
		case 28:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.Sfixed64S = append(m.Sfixed64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Sfixed64S) == 0 {
					m.Sfixed64S = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.Sfixed64S = append(m.Sfixed64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64S", wireType)
			}
		case 29:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Doubles = append(m.Doubles, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Doubles) == 0 {
					m.Doubles = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Doubles = append(m.Doubles, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Doubles", wireType)
			}
		case 30:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Floats = append(m.Floats, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Floats) == 0 {
					m.Floats = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Floats = append(m.Floats, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Floats", wireType)
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteArrays", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteArrays = append(m.ByteArrays, make([]byte, postIndex-iNdEx))
			copy(m.ByteArrays[len(m.ByteArrays)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType == 0 {
				var v TestEnum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (TestEnum(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enums = append(m.Enums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Enums) == 0 {
					m.Enums = make([]TestEnum, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v TestEnum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (TestEnum(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enums = append(m.Enums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enums", wireType)
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &TestMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("golden/test.proto", fileDescriptor_test_0639bdf0d6957922) }

var fileDescriptor_test_0639bdf0d6957922 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4f, 0x6b, 0xdb, 0x4c,
	0x10, 0xc6, 0x33, 0x59, 0xdb, 0x92, 0xd7, 0xf9, 0x63, 0xef, 0x9b, 0x37, 0x99, 0xa6, 0x89, 0x32,
	0xcd, 0x69, 0xc8, 0x21, 0xa5, 0xb6, 0xd0, 0xbd, 0x85, 0x1c, 0xdb, 0xc0, 0xd0, 0x53, 0x2f, 0xc5,
	0x26, 0x4a, 0x08, 0xd8, 0x56, 0xf0, 0xca, 0xd0, 0xf4, 0x53, 0xf4, 0x63, 0x05, 0x7a, 0xe9, 0xb1,
	0xc7, 0xd6, 0xfd, 0x22, 0x65, 0xa5, 0x5d, 0x09, 0x0a, 0xed, 0x4d, 0xbf, 0x67, 0xe6, 0x09, 0x93,
	0xfd, 0x81, 0xf5, 0xe8, 0xae, 0x98, 0xdf, 0xe4, 0xcb, 0x97, 0x65, 0x6e, 0xcb, 0xcb, 0x87, 0x55,
	0x51, 0x16, 0x46, 0xbb, 0xef, 0xcf, 0xf9, 0xaa, 0x78, 0x98, 0x9d, 0x7f, 0x8d, 0xf4, 0xe0, 0x7d,
	0x6e, 0xcb, 0xb7, 0xb9, 0xb5, 0xd3, 0xbb, 0xdc, 0x18, 0xdd, 0x99, 0x15, 0xc5, 0x1c, 0x81, 0x80,
	0x63, 0xa9, 0xbe, 0xcd, 0x81, 0xee, 0xde, 0x2f, 0xcb, 0xc9, 0x18, 0xb7, 0x09, 0xb8, 0x2b, 0x35,
	0xf8, 0x34, 0x4b, 0x51, 0x11, 0xb0, 0x92, 0x1a, 0xcc, 0xa1, 0xee, 0xad, 0xeb, 0xe5, 0x0e, 0x01,
	0xef, 0x8a, 0xa7, 0x90, 0x67, 0x29, 0x76, 0x09, 0xb8, 0x23, 0x9e, 0x5c, 0x6e, 0xeb, 0xfd, 0x1e,
	0x01, 0x8f, 0xc4, 0x53, 0xc8, 0xb3, 0x14, 0x23, 0x02, 0x36, 0xe2, 0xc9, 0xa0, 0x8e, 0x6e, 0xef,
	0x3f, 0xe5, 0x37, 0x93, 0x31, 0xc6, 0x04, 0x1c, 0x49, 0xc0, 0x66, 0x92, 0xa5, 0xd8, 0x27, 0xe0,
	0x9e, 0x04, 0x34, 0xc7, 0x3a, 0xb6, 0xa1, 0xa4, 0x09, 0x78, 0x5f, 0x1a, 0x6e, 0x67, 0x59, 0x8a,
	0x03, 0x02, 0x1e, 0x4a, 0xc3, 0xee, 0x86, 0x9b, 0x62, 0x3d, 0x9b, 0xe7, 0xb8, 0x43, 0xc0, 0x20,
	0x9e, 0xdc, 0x7f, 0x7e, 0x3b, 0x2f, 0xa6, 0x25, 0xee, 0x12, 0xf0, 0xb6, 0xd4, 0x50, 0x5d, 0x5c,
	0xae, 0xee, 0x97, 0x77, 0xb8, 0x47, 0xc0, 0x7d, 0xf1, 0x64, 0x4e, 0xb5, 0x9e, 0x3d, 0x96, 0xf9,
	0xc7, 0xe9, 0x6a, 0x35, 0x7d, 0xc4, 0x7d, 0x02, 0xde, 0x91, 0xbe, 0x4b, 0x5e, 0xbb, 0xc0, 0xb0,
	0xee, 0xe4, 0xcb, 0xf5, 0x02, 0x87, 0x04, 0xbc, 0x37, 0x3e, 0xb8, 0x6c, 0xdd, 0x5c, 0x3a, 0x2f,
	0x57, 0xcb, 0xf5, 0x42, 0xaa, 0x0d, 0xf3, 0x4a, 0x47, 0x8b, 0xda, 0x12, 0x8e, 0x08, 0x78, 0x30,
	0x3e, 0xfa, 0x73, 0xd9, 0x4b, 0x94, 0xb0, 0xe7, 0x2e, 0x75, 0x06, 0x2d, 0x1a, 0x52, 0x1c, 0x4b,
	0x0d, 0xee, 0xd2, 0xea, 0x91, 0x2d, 0xfe, 0x47, 0x8a, 0xbb, 0xe2, 0xc9, 0xe7, 0x59, 0x6a, 0xf1,
	0x80, 0x14, 0x2b, 0xf1, 0xe4, 0x5e, 0x76, 0xed, 0x0b, 0xff, 0x93, 0xe2, 0x5d, 0x09, 0x18, 0x26,
	0xae, 0x72, 0x48, 0x8a, 0x3b, 0x12, 0xd0, 0x4d, 0xac, 0xef, 0x1c, 0x91, 0xe2, 0x91, 0x04, 0x0c,
	0x13, 0xd7, 0x41, 0x52, 0x6c, 0x24, 0xa0, 0x73, 0xe1, 0xb5, 0x58, 0x7c, 0x46, 0x8a, 0x23, 0x69,
	0xb8, 0x99, 0xb9, 0xda, 0x31, 0x29, 0xee, 0x49, 0xc3, 0xe6, 0x44, 0xf7, 0x6d, 0x53, 0x7c, 0x4e,
	0x8a, 0xf7, 0xa5, 0x0d, 0xda, 0xa9, 0xab, 0x9e, 0x90, 0xe2, 0xa1, 0xb4, 0x81, 0xbb, 0xa6, 0xb6,
	0x6a, 0xf1, 0x94, 0x14, 0x83, 0x04, 0x74, 0xaf, 0x51, 0x89, 0xb5, 0x98, 0x90, 0xe2, 0x6d, 0xf1,
	0x54, 0xdd, 0x5f, 0x99, 0xb5, 0x78, 0x46, 0x8a, 0xfb, 0x12, 0xd0, 0x9c, 0xe9, 0x41, 0x6b, 0xda,
	0x22, 0x91, 0xe2, 0x1d, 0xd1, 0x8d, 0x6a, 0x6b, 0x2e, 0x74, 0xd7, 0x99, 0xb4, 0xf8, 0x82, 0xd4,
	0x5f, 0x65, 0xd7, 0x2b, 0x66, 0xa2, 0x63, 0x6f, 0xd1, 0xe2, 0x39, 0xa9, 0x7f, 0xe9, 0x6e, 0x16,
	0x2f, 0x4e, 0x75, 0x1c, 0xfe, 0x8e, 0x89, 0x75, 0xe7, 0xc3, 0x95, 0x5c, 0x0f, 0xb7, 0x4c, 0xa4,
	0xd5, 0xf5, 0xbb, 0xab, 0x21, 0xbc, 0xc1, 0xa7, 0x9f, 0xc9, 0xd6, 0xd3, 0x26, 0x81, 0x6f, 0x9b,
	0x04, 0xbe, 0x6f, 0x12, 0xf8, 0xb1, 0x49, 0xe0, 0xcb, 0xaf, 0x64, 0x6b, 0xd6, 0xab, 0x7e, 0x19,
	0x26, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x51, 0x2a, 0x2e, 0x5b, 0x2e, 0x04, 0x00, 0x00,
}
